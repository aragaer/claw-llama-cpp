;; Generated by :claw at 2023-10-11T12:45:05.147195Z
(uiop:define-package :%llama-cpp (:use))
(uiop:define-package :claw-llama-cpp-bindings~pristine (:use :cl))
(common-lisp:in-package :claw-llama-cpp-bindings~pristine)

(defparameter %llama-cpp::+api+ nil)

(defparameter %llama-cpp::+default-seed+ 4294967295)

(defparameter %llama-cpp::+file-magic-ggsn+ 1734833006)

(defparameter %llama-cpp::+h+ nil)

(defparameter %llama-cpp::+max-devices+ 1)

(defparameter %llama-cpp::+max-rng-state+ 65536)

(defparameter %llama-cpp::+session-magic+ 1734833006)

(defparameter %llama-cpp::+session-version+ 2)

(cffi:defcenum (%llama-cpp::ggml-backend-type :unsigned-int)
               "/home/aragaer/Projects/claw-llama-cpp/src/lib/llama.cpp/ggml.h:329:10"
               (:cpu 0)
               (:gpu 10)
               (:gpu-split 20))

(cffi:defcenum (%llama-cpp::ggml-log-level :unsigned-int)
               "/home/aragaer/Projects/claw-llama-cpp/src/lib/llama.cpp/ggml.h:460:10"
               (:error 2)
               (:warn 3)
               (:info 4))

(cffi:defcenum (%llama-cpp::ggml-op :unsigned-int)
               "/home/aragaer/Projects/claw-llama-cpp/src/lib/llama.cpp/ggml.h:354:10"
               (:none 0)
               (:dup 1)
               (:add 2)
               (:add1 3)
               (:acc 4)
               (:sub 5)
               (:mul 6)
               (:div 7)
               (:sqr 8)
               (:sqrt 9)
               (:log 10)
               (:sum 11)
               (:sum-rows 12)
               (:mean 13)
               (:argmax 14)
               (:repeat 15)
               (:repeat-back 16)
               (:concat 17)
               (:silu-back 18)
               (:norm 19)
               (:rms-norm 20)
               (:rms-norm-back 21)
               (:group-norm 22)
               (:mul-mat 23)
               (:out-prod 24)
               (:scale 25)
               (:set 26)
               (:cpy 27)
               (:cont 28)
               (:reshape 29)
               (:view 30)
               (:permute 31)
               (:transpose 32)
               (:get-rows 33)
               (:get-rows-back 34)
               (:diag 35)
               (:diag-mask-inf 36)
               (:diag-mask-zero 37)
               (:soft-max 38)
               (:soft-max-back 39)
               (:rope 40)
               (:rope-back 41)
               (:alibi 42)
               (:clamp 43)
               (:conv-1d 44)
               (:conv-2d 45)
               (:conv-transpose-1d 46)
               (:conv-transpose-2d 47)
               (:pool-1d 48)
               (:pool-2d 49)
               (:conv-1d-stage-0 50)
               (:conv-1d-stage-1 51)
               (:upscale 52)
               (:flash-attn 53)
               (:flash-ff 54)
               (:flash-attn-back 55)
               (:win-part 56)
               (:win-unpart 57)
               (:get-rel-pos 58)
               (:add-rel-pos 59)
               (:unary 60)
               (:map-unary 61)
               (:map-binary 62)
               (:map-custom1-f32 63)
               (:map-custom2-f32 64)
               (:map-custom3-f32 65)
               (:map-custom1 66)
               (:map-custom2 67)
               (:map-custom3 68)
               (:cross-entropy-loss 69)
               (:cross-entropy-loss-back 70)
               (:count 71))

(cffi:defcenum (%llama-cpp::ggml-type :unsigned-int)
               "/home/aragaer/Projects/claw-llama-cpp/src/lib/llama.cpp/ggml.h:305:10"
               (:f32 0)
               (:f16 1)
               (:q4-0 2)
               (:q4-1 3)
               (:q5-0 6)
               (:q5-1 7)
               (:q8-0 8)
               (:q8-1 9)
               (:q2-k 10)
               (:q3-k 11)
               (:q4-k 12)
               (:q5-k 13)
               (:q6-k 14)
               (:q8-k 15)
               (:i8 16)
               (:i16 17)
               (:i32 18)
               (:count 19))

(cffi:defcenum (%llama-cpp::ftype :unsigned-int)
               "/home/aragaer/Projects/claw-llama-cpp/src/lib/llama.cpp/llama.h:85:10"
               (:all-f32 0)
               (:mostly-f16 1)
               (:mostly-q4-0 2)
               (:mostly-q4-1 3)
               (:mostly-q4-1-some-f16 4)
               (:mostly-q8-0 7)
               (:mostly-q5-0 8)
               (:mostly-q5-1 9)
               (:mostly-q2-k 10)
               (:mostly-q3-k-s 11)
               (:mostly-q3-k-m 12)
               (:mostly-q3-k-l 13)
               (:mostly-q4-k-s 14)
               (:mostly-q4-k-m 15)
               (:mostly-q5-k-s 16)
               (:mostly-q5-k-m 17)
               (:mostly-q6-k 18)
               (:guessed 1024))

(cffi:defcenum (%llama-cpp::gretype :unsigned-int)
               "/home/aragaer/Projects/claw-llama-cpp/src/lib/llama.cpp/llama.h:199:10"
               (:end 0)
               (:alt 1)
               (:rule-ref 2)
               (:char 3)
               (:char-not 4)
               (:char-rng-upper 5)
               (:char-alt 6))

(cffi:defcenum (%llama-cpp::token-type :unsigned-int)
               "/home/aragaer/Projects/claw-llama-cpp/src/lib/llama.cpp/llama.h:74:10"
               (:undefined 0)
               (:normal 1)
               (:unknown 2)
               (:control 3)
               (:user-defined 4)
               (:unused 5)
               (:byte 6))

(cffi:defcenum (%llama-cpp::vocab-type :unsigned-int)
               "/home/aragaer/Projects/claw-llama-cpp/src/lib/llama.cpp/llama.h:69:10"
               (:spm 0)
               (:bpe 1))

(cffi:defcstruct (%llama-cpp::context :size 0))

(declaim (inline %llama-cpp::apply-lora-from-file))

(cffi:defcfun ("llama_apply_lora_from_file"
               %llama-cpp::apply-lora-from-file)
              :int
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::path-lora :string)
              (%llama-cpp::scale :float)
              (%llama-cpp::path-base-model :string)
              (%llama-cpp::n-threads :int))

(declaim (inline %llama-cpp::backend-free))

(cffi:defcfun ("llama_backend_free" %llama-cpp::backend-free) :void)

(declaim (inline %llama-cpp::backend-init))

(cffi:defcfun ("llama_backend_init" %llama-cpp::backend-init)
              :void
              (%llama-cpp::numa :bool))

(cffi:defctype %llama-cpp::int32-t :int)

(cffi:defctype %llama-cpp::token :int)

(cffi:defctype %llama-cpp::int8-t :char)

(cffi:defctype %llama-cpp::pos :int)

(cffi:defctype %llama-cpp::seq-id :int)

(cffi:defcstruct (%llama-cpp::batch :size 64)
                 (%llama-cpp::n-tokens %llama-cpp::int32-t :offset 0)
                 (%llama-cpp::token (:pointer %llama-cpp::token)
                  :offset 8)
                 (%llama-cpp::embd (:pointer :float) :offset 16)
                 (%llama-cpp::pos (:pointer %llama-cpp::pos) :offset
                  24)
                 (%llama-cpp::seq-id (:pointer %llama-cpp::seq-id)
                  :offset 32)
                 (%llama-cpp::logits :string :offset 40)
                 (%llama-cpp::all-pos-0 %llama-cpp::pos :offset 48)
                 (%llama-cpp::all-pos-1 %llama-cpp::pos :offset 52)
                 (%llama-cpp::all-seq-id %llama-cpp::seq-id :offset
                  56))

(declaim (inline %llama-cpp::batch-free))

(cffi:defcfun ("llama_batch_free" %llama-cpp::batch-free)
              :void
              (%llama-cpp::batch
               (:pointer (:struct %llama-cpp::batch))))

(declaim (inline %llama-cpp::batch-get-one))

(cffi:defcfun ("llama_batch_get_one" %llama-cpp::batch-get-one)
              (:pointer (:struct %llama-cpp::batch))
              (%llama-cpp::%%claw-result-
               (:pointer (:struct %llama-cpp::batch)))
              (%llama-cpp::tokens (:pointer %llama-cpp::token))
              (%llama-cpp::n-tokens %llama-cpp::int32-t)
              (%llama-cpp::pos-0 %llama-cpp::pos)
              (%llama-cpp::seq-id %llama-cpp::seq-id))

(declaim (inline %llama-cpp::batch-init))

(cffi:defcfun ("llama_batch_init" %llama-cpp::batch-init)
              (:pointer (:struct %llama-cpp::batch))
              (%llama-cpp::%%claw-result-
               (:pointer (:struct %llama-cpp::batch)))
              (%llama-cpp::n-tokens %llama-cpp::int32-t)
              (%llama-cpp::embd %llama-cpp::int32-t))

(cffi:defctype %llama-cpp::beam-search-callback-fn-t (:pointer :void))

(cffi:defctype %llama-cpp::size-t :unsigned-long)

(declaim (inline %llama-cpp::beam-search))

(cffi:defcfun ("llama_beam_search" %llama-cpp::beam-search)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::callback
               %llama-cpp::beam-search-callback-fn-t)
              (%llama-cpp::callback-data (:pointer :void))
              (%llama-cpp::n-beams %llama-cpp::size-t)
              (%llama-cpp::n-past :int)
              (%llama-cpp::n-predict :int))

(cffi:defctype %llama-cpp::uint32-t :unsigned-int)

(cffi:defcstruct (%llama-cpp::context-params :size 32)
                 (%llama-cpp::seed %llama-cpp::uint32-t :offset 0)
                 (%llama-cpp::n-ctx %llama-cpp::uint32-t :offset 4)
                 (%llama-cpp::n-batch %llama-cpp::uint32-t :offset 8)
                 (%llama-cpp::n-threads %llama-cpp::uint32-t :offset
                  12)
                 (%llama-cpp::n-threads-batch %llama-cpp::uint32-t
                  :offset 16)
                 (%llama-cpp::rope-freq-base :float :offset 20)
                 (%llama-cpp::rope-freq-scale :float :offset 24)
                 (%llama-cpp::mul-mat-q :bool :offset 28)
                 (%llama-cpp::f16-kv :bool :offset 29)
                 (%llama-cpp::logits-all :bool :offset 30)
                 (%llama-cpp::embedding :bool :offset 31))

(declaim (inline %llama-cpp::context-default-params))

(cffi:defcfun ("llama_context_default_params"
               %llama-cpp::context-default-params)
              (:pointer (:struct %llama-cpp::context-params))
              (%llama-cpp::%%claw-result-
               (:pointer (:struct %llama-cpp::context-params))))

(cffi:defctype %llama-cpp::uint8-t :unsigned-char)

(declaim (inline %llama-cpp::copy-state-data))

(cffi:defcfun ("llama_copy_state_data" %llama-cpp::copy-state-data)
              %llama-cpp::size-t
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::dst (:pointer %llama-cpp::uint8-t)))

(declaim (inline %llama-cpp::decode))

(cffi:defcfun ("llama_decode" %llama-cpp::decode)
              :int
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::batch
               (:pointer (:struct %llama-cpp::batch))))

(cffi:defcstruct (%llama-cpp::%io-marker :size 0))

(cffi:defctype %llama-cpp::%%off-t :long)

(cffi:defctype %llama-cpp::%io-lock-t :void)

(cffi:defctype %llama-cpp::%%off64-t :long)

(cffi:defcstruct (%llama-cpp::%io-codecvt :size 0))

(cffi:defcstruct (%llama-cpp::%io-wide-data :size 0))

(cffi:defcstruct (%llama-cpp::%io-file :size 216))

(cffi:defcstruct (%llama-cpp::%io-file :size 216)
                 (%llama-cpp::%flags :int :offset 0)
                 (%llama-cpp::%io-read-ptr :string :offset 8)
                 (%llama-cpp::%io-read-end :string :offset 16)
                 (%llama-cpp::%io-read-base :string :offset 24)
                 (%llama-cpp::%io-write-base :string :offset 32)
                 (%llama-cpp::%io-write-ptr :string :offset 40)
                 (%llama-cpp::%io-write-end :string :offset 48)
                 (%llama-cpp::%io-buf-base :string :offset 56)
                 (%llama-cpp::%io-buf-end :string :offset 64)
                 (%llama-cpp::%io-save-base :string :offset 72)
                 (%llama-cpp::%io-backup-base :string :offset 80)
                 (%llama-cpp::%io-save-end :string :offset 88)
                 (%llama-cpp::%markers
                  (:pointer (:struct %llama-cpp::%io-marker)) :offset
                  96)
                 (%llama-cpp::%chain
                  (:pointer (:struct %llama-cpp::%io-file)) :offset
                  104)
                 (%llama-cpp::%fileno :int :offset 112)
                 (%llama-cpp::%flags2 :int :offset 116)
                 (%llama-cpp::%old-offset %llama-cpp::%%off-t :offset
                  120)
                 (%llama-cpp::%cur-column :unsigned-short :offset
                  128)
                 (%llama-cpp::%vtable-offset :char :offset 130)
                 (%llama-cpp::%shortbuf :char :count 1 :offset 131)
                 (%llama-cpp::%lock (:pointer %llama-cpp::%io-lock-t)
                  :offset 136)
                 (%llama-cpp::%offset %llama-cpp::%%off64-t :offset
                  144)
                 (%llama-cpp::%codecvt
                  (:pointer (:struct %llama-cpp::%io-codecvt))
                  :offset 152)
                 (%llama-cpp::%wide-data
                  (:pointer (:struct %llama-cpp::%io-wide-data))
                  :offset 160)
                 (%llama-cpp::%freeres-list
                  (:pointer (:struct %llama-cpp::%io-file)) :offset
                  168)
                 (%llama-cpp::%freeres-buf (:pointer :void) :offset
                  176)
                 (%llama-cpp::%%pad5 %llama-cpp::size-t :offset 184)
                 (%llama-cpp::%mode :int :offset 192)
                 (%llama-cpp::%unused2 :char :count 20 :offset 196))

(cffi:defctype %llama-cpp::file (:struct %llama-cpp::%io-file))

(declaim (inline %llama-cpp::dump-timing-info-yaml))

(cffi:defcfun ("llama_dump_timing_info_yaml"
               %llama-cpp::dump-timing-info-yaml)
              :void
              (%llama-cpp::stream (:pointer %llama-cpp::file))
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::eval))

(cffi:defcfun ("llama_eval" %llama-cpp::eval)
              :int
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::tokens (:pointer %llama-cpp::token))
              (%llama-cpp::n-tokens %llama-cpp::int32-t)
              (%llama-cpp::n-past :int))

(declaim (inline %llama-cpp::eval-embd))

(cffi:defcfun ("llama_eval_embd" %llama-cpp::eval-embd)
              :int
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::embd (:pointer :float))
              (%llama-cpp::n-tokens %llama-cpp::int32-t)
              (%llama-cpp::n-past :int))

(declaim (inline %llama-cpp::free))

(cffi:defcfun ("llama_free" %llama-cpp::free)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(cffi:defcstruct (%llama-cpp::model :size 0))

(declaim (inline %llama-cpp::free-model))

(cffi:defcfun ("llama_free_model" %llama-cpp::free-model)
              :void
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model))))

(declaim (inline %llama-cpp::get-embeddings))

(cffi:defcfun ("llama_get_embeddings" %llama-cpp::get-embeddings)
              (:pointer :float)
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::get-kv-cache-token-count))

(cffi:defcfun ("llama_get_kv_cache_token_count"
               %llama-cpp::get-kv-cache-token-count)
              :int
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::get-logits))

(cffi:defcfun ("llama_get_logits" %llama-cpp::get-logits)
              (:pointer :float)
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::get-logits-ith))

(cffi:defcfun ("llama_get_logits_ith" %llama-cpp::get-logits-ith)
              (:pointer :float)
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::i %llama-cpp::int32-t))

(declaim (inline %llama-cpp::get-model))

(cffi:defcfun ("llama_get_model" %llama-cpp::get-model)
              (:pointer (:struct %llama-cpp::model))
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(cffi:defcstruct (%llama-cpp::ggml-backend-buffer :size 0))

(cffi:defctype %llama-cpp::int64-t :long)

(cffi:defcstruct (%llama-cpp::ggml-tensor :size 320))

(cffi:defcstruct (%llama-cpp::ggml-tensor :size 320)
                 (%llama-cpp::type %llama-cpp::ggml-type :offset 0)
                 (%llama-cpp::backend %llama-cpp::ggml-backend-type
                  :offset 4)
                 (%llama-cpp::buffer
                  (:pointer
                   (:struct %llama-cpp::ggml-backend-buffer))
                  :offset 8)
                 (%llama-cpp::n-dims :int :offset 16)
                 (%llama-cpp::ne %llama-cpp::int64-t :count 4 :offset
                  24)
                 (%llama-cpp::nb %llama-cpp::size-t :count 4 :offset
                  56)
                 (%llama-cpp::op %llama-cpp::ggml-op :offset 88)
                 (%llama-cpp::op-params %llama-cpp::int32-t :count 8
                  :offset 92)
                 (%llama-cpp::is-param :bool :offset 124)
                 (%llama-cpp::grad
                  (:pointer (:struct %llama-cpp::ggml-tensor))
                  :offset 128)
                 (%llama-cpp::src
                  (:pointer (:struct %llama-cpp::ggml-tensor)) :count
                  6 :offset 136)
                 (%llama-cpp::perf-runs :int :offset 184)
                 (%llama-cpp::perf-cycles %llama-cpp::int64-t :offset
                  192)
                 (%llama-cpp::perf-time-us %llama-cpp::int64-t
                  :offset 200)
                 (%llama-cpp::view-src
                  (:pointer (:struct %llama-cpp::ggml-tensor))
                  :offset 208)
                 (%llama-cpp::view-offs %llama-cpp::size-t :offset
                  216)
                 (%llama-cpp::data (:pointer :void) :offset 224)
                 (%llama-cpp::name :char :count 64 :offset 232)
                 (%llama-cpp::extra (:pointer :void) :offset 296)
                 (%llama-cpp::padding :char :count 12 :offset 304))

(declaim (inline %llama-cpp::get-model-tensor))

(cffi:defcfun ("llama_get_model_tensor" %llama-cpp::get-model-tensor)
              (:pointer (:struct %llama-cpp::ggml-tensor))
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model)))
              (%llama-cpp::name :string))

(declaim (inline %llama-cpp::get-state-size))

(cffi:defcfun ("llama_get_state_size" %llama-cpp::get-state-size)
              %llama-cpp::size-t
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(cffi:defcstruct (%llama-cpp::timings :size 64)
                 (%llama-cpp::t-start-ms :double :offset 0)
                 (%llama-cpp::t-end-ms :double :offset 8)
                 (%llama-cpp::t-load-ms :double :offset 16)
                 (%llama-cpp::t-sample-ms :double :offset 24)
                 (%llama-cpp::t-p-eval-ms :double :offset 32)
                 (%llama-cpp::t-eval-ms :double :offset 40)
                 (%llama-cpp::n-sample %llama-cpp::int32-t :offset
                  48)
                 (%llama-cpp::n-p-eval %llama-cpp::int32-t :offset
                  52)
                 (%llama-cpp::n-eval %llama-cpp::int32-t :offset 56))

(declaim (inline %llama-cpp::get-timings))

(cffi:defcfun ("llama_get_timings" %llama-cpp::get-timings)
              (:pointer (:struct %llama-cpp::timings))
              (%llama-cpp::%%claw-result-
               (:pointer (:struct %llama-cpp::timings)))
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(cffi:defcstruct (%llama-cpp::grammar :size 0))

(declaim (inline %llama-cpp::grammar-accept-token))

(cffi:defcfun ("llama_grammar_accept_token"
               %llama-cpp::grammar-accept-token)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::grammar
               (:pointer (:struct %llama-cpp::grammar)))
              (%llama-cpp::token %llama-cpp::token))

(declaim (inline %llama-cpp::grammar-copy))

(cffi:defcfun ("llama_grammar_copy" %llama-cpp::grammar-copy)
              (:pointer (:struct %llama-cpp::grammar))
              (%llama-cpp::grammar
               (:pointer (:struct %llama-cpp::grammar))))

(declaim (inline %llama-cpp::grammar-free))

(cffi:defcfun ("llama_grammar_free" %llama-cpp::grammar-free)
              :void
              (%llama-cpp::grammar
               (:pointer (:struct %llama-cpp::grammar))))

(cffi:defcstruct (%llama-cpp::grammar-element :size 8)
                 (%llama-cpp::type %llama-cpp::gretype :offset 0)
                 (%llama-cpp::value %llama-cpp::uint32-t :offset 4))

(cffi:defctype %llama-cpp::grammar-element
               (:struct %llama-cpp::grammar-element))

(declaim (inline %llama-cpp::grammar-init))

(cffi:defcfun ("llama_grammar_init" %llama-cpp::grammar-init)
              (:pointer (:struct %llama-cpp::grammar))
              (%llama-cpp::rules
               (:pointer (:pointer %llama-cpp::grammar-element)))
              (%llama-cpp::n-rules %llama-cpp::size-t)
              (%llama-cpp::start-rule-index %llama-cpp::size-t))

(declaim (inline %llama-cpp::kv-cache-seq-cp))

(cffi:defcfun ("llama_kv_cache_seq_cp" %llama-cpp::kv-cache-seq-cp)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::seq-id-src %llama-cpp::seq-id)
              (%llama-cpp::seq-id-dst %llama-cpp::seq-id)
              (%llama-cpp::p0 %llama-cpp::pos)
              (%llama-cpp::p1 %llama-cpp::pos))

(declaim (inline %llama-cpp::kv-cache-seq-keep))

(cffi:defcfun ("llama_kv_cache_seq_keep"
               %llama-cpp::kv-cache-seq-keep)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::seq-id %llama-cpp::seq-id))

(declaim (inline %llama-cpp::kv-cache-seq-rm))

(cffi:defcfun ("llama_kv_cache_seq_rm" %llama-cpp::kv-cache-seq-rm)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::seq-id %llama-cpp::seq-id)
              (%llama-cpp::p0 %llama-cpp::pos)
              (%llama-cpp::p1 %llama-cpp::pos))

(declaim (inline %llama-cpp::kv-cache-seq-shift))

(cffi:defcfun ("llama_kv_cache_seq_shift"
               %llama-cpp::kv-cache-seq-shift)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::seq-id %llama-cpp::seq-id)
              (%llama-cpp::p0 %llama-cpp::pos)
              (%llama-cpp::p1 %llama-cpp::pos)
              (%llama-cpp::delta %llama-cpp::pos))

(declaim (inline %llama-cpp::kv-cache-tokens-rm))

(cffi:defcfun ("llama_kv_cache_tokens_rm"
               %llama-cpp::kv-cache-tokens-rm)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::c0 %llama-cpp::int32-t)
              (%llama-cpp::c1 %llama-cpp::int32-t))

(cffi:defctype %llama-cpp::progress-callback (:pointer :void))

(cffi:defcstruct (%llama-cpp::model-params :size 40)
                 (%llama-cpp::n-gpu-layers %llama-cpp::int32-t
                  :offset 0)
                 (%llama-cpp::main-gpu %llama-cpp::int32-t :offset 4)
                 (%llama-cpp::tensor-split (:pointer :float) :offset
                  8)
                 (%llama-cpp::progress-callback
                  %llama-cpp::progress-callback :offset 16)
                 (%llama-cpp::progress-callback-user-data
                  (:pointer :void) :offset 24)
                 (%llama-cpp::vocab-only :bool :offset 32)
                 (%llama-cpp::use-mmap :bool :offset 33)
                 (%llama-cpp::use-mlock :bool :offset 34))

(declaim (inline %llama-cpp::load-model-from-file))

(cffi:defcfun ("llama_load_model_from_file"
               %llama-cpp::load-model-from-file)
              (:pointer (:struct %llama-cpp::model))
              (%llama-cpp::path-model :string)
              (%llama-cpp::params
               (:pointer (:struct %llama-cpp::model-params))))

(declaim (inline %llama-cpp::load-session-file))

(cffi:defcfun ("llama_load_session_file"
               %llama-cpp::load-session-file)
              :bool
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::path-session :string)
              (%llama-cpp::tokens-out (:pointer %llama-cpp::token))
              (%llama-cpp::n-token-capacity %llama-cpp::size-t)
              (%llama-cpp::n-token-count-out
               (:pointer %llama-cpp::size-t)))

(cffi:defctype %llama-cpp::ggml-log-callback (:pointer :void))

(declaim (inline %llama-cpp::log-set))

(cffi:defcfun ("llama_log_set" %llama-cpp::log-set)
              :void
              (%llama-cpp::log-callback
               %llama-cpp::ggml-log-callback)
              (%llama-cpp::user-data (:pointer :void)))

(declaim (inline %llama-cpp::max-devices))

(cffi:defcfun ("llama_max_devices" %llama-cpp::max-devices) :int)

(declaim (inline %llama-cpp::mlock-supported))

(cffi:defcfun ("llama_mlock_supported" %llama-cpp::mlock-supported)
              :bool)

(declaim (inline %llama-cpp::mmap-supported))

(cffi:defcfun ("llama_mmap_supported" %llama-cpp::mmap-supported)
              :bool)

(declaim (inline %llama-cpp::model-apply-lora-from-file))

(cffi:defcfun ("llama_model_apply_lora_from_file"
               %llama-cpp::model-apply-lora-from-file)
              :int
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model)))
              (%llama-cpp::path-lora :string)
              (%llama-cpp::scale :float)
              (%llama-cpp::path-base-model :string)
              (%llama-cpp::n-threads :int))

(declaim (inline %llama-cpp::model-default-params))

(cffi:defcfun ("llama_model_default_params"
               %llama-cpp::model-default-params)
              (:pointer (:struct %llama-cpp::model-params))
              (%llama-cpp::%%claw-result-
               (:pointer (:struct %llama-cpp::model-params))))

(declaim (inline %llama-cpp::model-desc))

(cffi:defcfun ("llama_model_desc" %llama-cpp::model-desc)
              :int
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model)))
              (%llama-cpp::buf :string)
              (%llama-cpp::buf-size %llama-cpp::size-t))

(cffi:defctype %llama-cpp::uint64-t :unsigned-long)

(declaim (inline %llama-cpp::model-n-params))

(cffi:defcfun ("llama_model_n_params" %llama-cpp::model-n-params)
              %llama-cpp::uint64-t
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model))))

(cffi:defcstruct (%llama-cpp::model-quantize-params :size 12)
                 (%llama-cpp::nthread :int :offset 0)
                 (%llama-cpp::ftype %llama-cpp::ftype :offset 4)
                 (%llama-cpp::allow-requantize :bool :offset 8)
                 (%llama-cpp::quantize-output-tensor :bool :offset 9)
                 (%llama-cpp::only-copy :bool :offset 10))

(cffi:defctype %llama-cpp::model-quantize-params
               (:struct %llama-cpp::model-quantize-params))

(declaim (inline %llama-cpp::model-quantize))

(cffi:defcfun ("llama_model_quantize" %llama-cpp::model-quantize)
              :int
              (%llama-cpp::fname-inp :string)
              (%llama-cpp::fname-out :string)
              (%llama-cpp::params
               (:pointer %llama-cpp::model-quantize-params)))

(declaim (inline %llama-cpp::model-quantize-default-params))

(cffi:defcfun ("llama_model_quantize_default_params"
               %llama-cpp::model-quantize-default-params)
              (:pointer (:struct %llama-cpp::model-quantize-params))
              (%llama-cpp::%%claw-result-
               (:pointer
                (:struct %llama-cpp::model-quantize-params))))

(declaim (inline %llama-cpp::model-size))

(cffi:defcfun ("llama_model_size" %llama-cpp::model-size)
              %llama-cpp::uint64-t
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model))))

(declaim (inline %llama-cpp::n-ctx))

(cffi:defcfun ("llama_n_ctx" %llama-cpp::n-ctx)
              :int
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::n-ctx-train))

(cffi:defcfun ("llama_n_ctx_train" %llama-cpp::n-ctx-train)
              :int
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model))))

(declaim (inline %llama-cpp::n-embd))

(cffi:defcfun ("llama_n_embd" %llama-cpp::n-embd)
              :int
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model))))

(declaim (inline %llama-cpp::n-vocab))

(cffi:defcfun ("llama_n_vocab" %llama-cpp::n-vocab)
              :int
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model))))

(declaim (inline %llama-cpp::new-context-with-model))

(cffi:defcfun ("llama_new_context_with_model"
               %llama-cpp::new-context-with-model)
              (:pointer (:struct %llama-cpp::context))
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model)))
              (%llama-cpp::params
               (:pointer (:struct %llama-cpp::context-params))))

(declaim (inline %llama-cpp::print-system-info))

(cffi:defcfun ("llama_print_system_info"
               %llama-cpp::print-system-info)
              :string)

(declaim (inline %llama-cpp::print-timings))

(cffi:defcfun ("llama_print_timings" %llama-cpp::print-timings)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::reset-timings))

(cffi:defcfun ("llama_reset_timings" %llama-cpp::reset-timings)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::rope-freq-scale-train))

(cffi:defcfun ("llama_rope_freq_scale_train"
               %llama-cpp::rope-freq-scale-train)
              :float
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model))))

(cffi:defcstruct (%llama-cpp::token-data :size 12)
                 (%llama-cpp::id %llama-cpp::token :offset 0)
                 (%llama-cpp::logit :float :offset 4)
                 (%llama-cpp::p :float :offset 8))

(cffi:defctype %llama-cpp::token-data
               (:struct %llama-cpp::token-data))

(cffi:defcstruct (%llama-cpp::token-data-array :size 24)
                 (%llama-cpp::data (:pointer %llama-cpp::token-data)
                  :offset 0)
                 (%llama-cpp::size %llama-cpp::size-t :offset 8)
                 (%llama-cpp::sorted :bool :offset 16))

(cffi:defctype %llama-cpp::token-data-array
               (:struct %llama-cpp::token-data-array))

(declaim (inline %llama-cpp::sample-classifier-free-guidance))

(cffi:defcfun ("llama_sample_classifier_free_guidance"
               %llama-cpp::sample-classifier-free-guidance)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::guidance-ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::scale :float))

(declaim (inline %llama-cpp::sample-frequency-and-presence-penalties))

(cffi:defcfun ("llama_sample_frequency_and_presence_penalties"
               %llama-cpp::sample-frequency-and-presence-penalties)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::last-tokens (:pointer %llama-cpp::token))
              (%llama-cpp::last-tokens-size %llama-cpp::size-t)
              (%llama-cpp::alpha-frequency :float)
              (%llama-cpp::alpha-presence :float))

(declaim (inline %llama-cpp::sample-grammar))

(cffi:defcfun ("llama_sample_grammar" %llama-cpp::sample-grammar)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::grammar
               (:pointer (:struct %llama-cpp::grammar))))

(declaim (inline %llama-cpp::sample-repetition-penalty))

(cffi:defcfun ("llama_sample_repetition_penalty"
               %llama-cpp::sample-repetition-penalty)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::last-tokens (:pointer %llama-cpp::token))
              (%llama-cpp::last-tokens-size %llama-cpp::size-t)
              (%llama-cpp::penalty :float))

(declaim (inline %llama-cpp::sample-softmax))

(cffi:defcfun ("llama_sample_softmax" %llama-cpp::sample-softmax)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array)))

(declaim (inline %llama-cpp::sample-tail-free))

(cffi:defcfun ("llama_sample_tail_free" %llama-cpp::sample-tail-free)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::z :float)
              (%llama-cpp::min-keep %llama-cpp::size-t))

(declaim (inline %llama-cpp::sample-temp))

(cffi:defcfun ("llama_sample_temp" %llama-cpp::sample-temp)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::temp :float))

(declaim (inline %llama-cpp::sample-temperature))

(cffi:defcfun ("llama_sample_temperature"
               %llama-cpp::sample-temperature)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::temp :float))

(declaim (inline %llama-cpp::sample-token))

(cffi:defcfun ("llama_sample_token" %llama-cpp::sample-token)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array)))

(declaim (inline %llama-cpp::sample-token-greedy))

(cffi:defcfun ("llama_sample_token_greedy"
               %llama-cpp::sample-token-greedy)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array)))

(declaim (inline %llama-cpp::sample-token-mirostat))

(cffi:defcfun ("llama_sample_token_mirostat"
               %llama-cpp::sample-token-mirostat)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::tau :float)
              (%llama-cpp::eta :float)
              (%llama-cpp::m :int)
              (%llama-cpp::mu (:pointer :float)))

(declaim (inline %llama-cpp::sample-token-mirostat-v2))

(cffi:defcfun ("llama_sample_token_mirostat_v2"
               %llama-cpp::sample-token-mirostat-v2)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::tau :float)
              (%llama-cpp::eta :float)
              (%llama-cpp::mu (:pointer :float)))

(declaim (inline %llama-cpp::sample-top-k))

(cffi:defcfun ("llama_sample_top_k" %llama-cpp::sample-top-k)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::k :int)
              (%llama-cpp::min-keep %llama-cpp::size-t))

(declaim (inline %llama-cpp::sample-top-p))

(cffi:defcfun ("llama_sample_top_p" %llama-cpp::sample-top-p)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::p :float)
              (%llama-cpp::min-keep %llama-cpp::size-t))

(declaim (inline %llama-cpp::sample-typical))

(cffi:defcfun ("llama_sample_typical" %llama-cpp::sample-typical)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::candidates
               (:pointer %llama-cpp::token-data-array))
              (%llama-cpp::p :float)
              (%llama-cpp::min-keep %llama-cpp::size-t))

(declaim (inline %llama-cpp::save-session-file))

(cffi:defcfun ("llama_save_session_file"
               %llama-cpp::save-session-file)
              :bool
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::path-session :string)
              (%llama-cpp::tokens (:pointer %llama-cpp::token))
              (%llama-cpp::n-token-count %llama-cpp::size-t))

(declaim (inline %llama-cpp::set-n-threads))

(cffi:defcfun ("llama_set_n_threads" %llama-cpp::set-n-threads)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::n-threads %llama-cpp::uint32-t)
              (%llama-cpp::n-threads-batch %llama-cpp::uint32-t))

(declaim (inline %llama-cpp::set-rng-seed))

(cffi:defcfun ("llama_set_rng_seed" %llama-cpp::set-rng-seed)
              :void
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::seed %llama-cpp::uint32-t))

(declaim (inline %llama-cpp::set-state-data))

(cffi:defcfun ("llama_set_state_data" %llama-cpp::set-state-data)
              %llama-cpp::size-t
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::src (:pointer %llama-cpp::uint8-t)))

(declaim (inline %llama-cpp::time-us))

(cffi:defcfun ("llama_time_us" %llama-cpp::time-us)
              %llama-cpp::int64-t)

(declaim (inline %llama-cpp::token-bos))

(cffi:defcfun ("llama_token_bos" %llama-cpp::token-bos)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::token-eos))

(cffi:defcfun ("llama_token_eos" %llama-cpp::token-eos)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::token-eot))

(cffi:defcfun ("llama_token_eot" %llama-cpp::token-eot)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::token-get-score))

(cffi:defcfun ("llama_token_get_score" %llama-cpp::token-get-score)
              :float
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::token %llama-cpp::token))

(declaim (inline %llama-cpp::token-get-text))

(cffi:defcfun ("llama_token_get_text" %llama-cpp::token-get-text)
              :string
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::token %llama-cpp::token))

(declaim (inline %llama-cpp::token-get-type))

(cffi:defcfun ("llama_token_get_type" %llama-cpp::token-get-type)
              %llama-cpp::token-type
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context)))
              (%llama-cpp::token %llama-cpp::token))

(declaim (inline %llama-cpp::token-middle))

(cffi:defcfun ("llama_token_middle" %llama-cpp::token-middle)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::token-nl))

(cffi:defcfun ("llama_token_nl" %llama-cpp::token-nl)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::token-prefix))

(cffi:defcfun ("llama_token_prefix" %llama-cpp::token-prefix)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::token-suffix))

(cffi:defcfun ("llama_token_suffix" %llama-cpp::token-suffix)
              %llama-cpp::token
              (%llama-cpp::ctx
               (:pointer (:struct %llama-cpp::context))))

(declaim (inline %llama-cpp::token-to-piece))

(cffi:defcfun ("llama_token_to_piece" %llama-cpp::token-to-piece)
              :int
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model)))
              (%llama-cpp::token %llama-cpp::token)
              (%llama-cpp::buf :string)
              (%llama-cpp::length :int))

(declaim (inline %llama-cpp::tokenize))

(cffi:defcfun ("llama_tokenize" %llama-cpp::tokenize)
              :int
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model)))
              (%llama-cpp::text :string)
              (%llama-cpp::text-len :int)
              (%llama-cpp::tokens (:pointer %llama-cpp::token))
              (%llama-cpp::n-max-tokens :int)
              (%llama-cpp::add-bos :bool))

(declaim (inline %llama-cpp::vocab-type))

(cffi:defcfun ("llama_vocab_type" %llama-cpp::vocab-type)
              %llama-cpp::vocab-type
              (%llama-cpp::model
               (:pointer (:struct %llama-cpp::model))))

(cffi:defcstruct (%llama-cpp::beam-view :size 24)
                 (%llama-cpp::tokens (:pointer %llama-cpp::token)
                  :offset 0)
                 (%llama-cpp::n-tokens %llama-cpp::size-t :offset 8)
                 (%llama-cpp::p :float :offset 16)
                 (%llama-cpp::eob :bool :offset 20))

(cffi:defcstruct (%llama-cpp::beams-state :size 32)
                 (%llama-cpp::beam-views
                  (:pointer (:struct %llama-cpp::beam-view)) :offset
                  0)
                 (%llama-cpp::n-beams %llama-cpp::size-t :offset 8)
                 (%llama-cpp::common-prefix-length %llama-cpp::size-t
                  :offset 16)
                 (%llama-cpp::last-call :bool :offset 24))

(cffi:defctype %llama-cpp::batch (:struct %llama-cpp::batch))

(eval-when (:load-toplevel :compile-toplevel :execute)
  (export '%llama-cpp::beam-search-callback-fn-t :%llama-cpp)
  (export '%llama-cpp::%cur-column :%llama-cpp)
  (export '%llama-cpp::nthread :%llama-cpp)
  (export '%llama-cpp::progress-callback-user-data :%llama-cpp)
  (export '%llama-cpp::context-default-params :%llama-cpp)
  (export '%llama-cpp::token-data-array :%llama-cpp)
  (export '%llama-cpp::n-threads-batch :%llama-cpp)
  (export '%llama-cpp::model :%llama-cpp)
  (export '%llama-cpp::%io-buf-base :%llama-cpp)
  (export '%llama-cpp::set-state-data :%llama-cpp)
  (export '%llama-cpp::model-n-params :%llama-cpp)
  (export '%llama-cpp::beam-view :%llama-cpp)
  (export '%llama-cpp::%io-save-end :%llama-cpp)
  (export '%llama-cpp::progress-callback :%llama-cpp)
  (export '%llama-cpp::token-eos :%llama-cpp)
  (export '%llama-cpp::perf-cycles :%llama-cpp)
  (export '%llama-cpp::max-devices :%llama-cpp)
  (export '%llama-cpp::token-suffix :%llama-cpp)
  (export '%llama-cpp::tensor-split :%llama-cpp)
  (export '%llama-cpp::ggml-tensor :%llama-cpp)
  (export '%llama-cpp::last-call :%llama-cpp)
  (export '%llama-cpp::mul-mat-q :%llama-cpp)
  (export '%llama-cpp::ne :%llama-cpp)
  (export '%llama-cpp::%%off64-t :%llama-cpp)
  (export '%llama-cpp::pos :%llama-cpp)
  (export '%llama-cpp::value :%llama-cpp)
  (export '%llama-cpp::+max-devices+ :%llama-cpp)
  (export '%llama-cpp::%markers :%llama-cpp)
  (export '%llama-cpp::vocab-type :%llama-cpp)
  (export '%llama-cpp::reset-timings :%llama-cpp)
  (export '%llama-cpp::view-src :%llama-cpp)
  (export '%llama-cpp::ggml-backend-buffer :%llama-cpp)
  (export '%llama-cpp::%io-read-base :%llama-cpp)
  (export '%llama-cpp::perf-runs :%llama-cpp)
  (export '%llama-cpp::%chain :%llama-cpp)
  (export '%llama-cpp::%%pad5 :%llama-cpp)
  (export '%llama-cpp::print-timings :%llama-cpp)
  (export '%llama-cpp::n-ctx-train :%llama-cpp)
  (export '%llama-cpp::f16-kv :%llama-cpp)
  (export '%llama-cpp::sample-tail-free :%llama-cpp)
  (export '%llama-cpp::get-state-size :%llama-cpp)
  (export '%llama-cpp::sample-token :%llama-cpp)
  (export '%llama-cpp::print-system-info :%llama-cpp)
  (export '%llama-cpp::new-context-with-model :%llama-cpp)
  (export '%llama-cpp::sorted :%llama-cpp)
  (export '%llama-cpp::model-params :%llama-cpp)
  (export '%llama-cpp::+session-magic+ :%llama-cpp)
  (export '%llama-cpp::get-timings :%llama-cpp)
  (export '%llama-cpp::extra :%llama-cpp)
  (export '%llama-cpp::+h+ :%llama-cpp)
  (export '%llama-cpp::timings :%llama-cpp)
  (export '%llama-cpp::token-eot :%llama-cpp)
  (export '%llama-cpp::eval :%llama-cpp)
  (export '%llama-cpp::logits :%llama-cpp)
  (export '%llama-cpp::load-session-file :%llama-cpp)
  (export '%llama-cpp::%freeres-buf :%llama-cpp)
  (export '%llama-cpp::%vtable-offset :%llama-cpp)
  (export '%llama-cpp::t-p-eval-ms :%llama-cpp)
  (export '%llama-cpp::context :%llama-cpp)
  (export '%llama-cpp::int8-t :%llama-cpp)
  (export '%llama-cpp::ggml-log-callback :%llama-cpp)
  (export '%llama-cpp::apply-lora-from-file :%llama-cpp)
  (export '%llama-cpp::%mode :%llama-cpp)
  (export '%llama-cpp::grad :%llama-cpp)
  (export '%llama-cpp::sample-softmax :%llama-cpp)
  (export '%llama-cpp::log-set :%llama-cpp)
  (export '%llama-cpp::tokenize :%llama-cpp)
  (export '%llama-cpp::%flags :%llama-cpp)
  (export '%llama-cpp::set-rng-seed :%llama-cpp)
  (export '%llama-cpp::perf-time-us :%llama-cpp)
  (export '%llama-cpp::batch-init :%llama-cpp)
  (export '%llama-cpp::model-size :%llama-cpp)
  (export '%llama-cpp::backend :%llama-cpp)
  (export '%llama-cpp::sample-token-mirostat :%llama-cpp)
  (export '%llama-cpp::common-prefix-length :%llama-cpp)
  (export '%llama-cpp::%io-lock-t :%llama-cpp)
  (export '%llama-cpp::backend-free :%llama-cpp)
  (export '%llama-cpp::token-get-score :%llama-cpp)
  (export '%llama-cpp::logits-all :%llama-cpp)
  (export '%llama-cpp::sample-classifier-free-guidance :%llama-cpp)
  (export '%llama-cpp::n-batch :%llama-cpp)
  (export '%llama-cpp::%unused2 :%llama-cpp)
  (export '%llama-cpp::ggml-op :%llama-cpp)
  (export '%llama-cpp::is-param :%llama-cpp)
  (export '%llama-cpp::vocab-only :%llama-cpp)
  (export '%llama-cpp::%io-codecvt :%llama-cpp)
  (export '%llama-cpp::uint8-t :%llama-cpp)
  (export '%llama-cpp::n-gpu-layers :%llama-cpp)
  (export '%llama-cpp::ggml-backend-type :%llama-cpp)
  (export '%llama-cpp::free :%llama-cpp)
  (export '%llama-cpp::sample-temp :%llama-cpp)
  (export '%llama-cpp::seq-id :%llama-cpp)
  (export '%llama-cpp::token-nl :%llama-cpp)
  (export '%llama-cpp::copy-state-data :%llama-cpp)
  (export '%llama-cpp::sample-typical :%llama-cpp)
  (export '%llama-cpp::type :%llama-cpp)
  (export '%llama-cpp::eob :%llama-cpp)
  (export '%llama-cpp::dump-timing-info-yaml :%llama-cpp)
  (export '%llama-cpp::%lock :%llama-cpp)
  (export '%llama-cpp::n-tokens :%llama-cpp)
  (export '%llama-cpp::beam-search :%llama-cpp)
  (export '%llama-cpp::sample-token-mirostat-v2 :%llama-cpp)
  (export '%llama-cpp::quantize-output-tensor :%llama-cpp)
  (export '%llama-cpp::model-quantize-params :%llama-cpp)
  (export '%llama-cpp::+file-magic-ggsn+ :%llama-cpp)
  (export '%llama-cpp::get-kv-cache-token-count :%llama-cpp)
  (export '%llama-cpp::embd :%llama-cpp)
  (export '%llama-cpp::token :%llama-cpp)
  (export '%llama-cpp::model-quantize-default-params :%llama-cpp)
  (export '%llama-cpp::t-eval-ms :%llama-cpp)
  (export '%llama-cpp::%freeres-list :%llama-cpp)
  (export '%llama-cpp::int64-t :%llama-cpp)
  (export '%llama-cpp::batch-get-one :%llama-cpp)
  (export '%llama-cpp::grammar-free :%llama-cpp)
  (export '%llama-cpp::context-params :%llama-cpp)
  (export '%llama-cpp::n-ctx :%llama-cpp)
  (export '%llama-cpp::batch-free :%llama-cpp)
  (export '%llama-cpp::grammar-accept-token :%llama-cpp)
  (export '%llama-cpp::token-get-type :%llama-cpp)
  (export '%llama-cpp::grammar-element :%llama-cpp)
  (export '%llama-cpp::ggml-type :%llama-cpp)
  (export '%llama-cpp::batch :%llama-cpp)
  (export '%llama-cpp::model-default-params :%llama-cpp)
  (export '%llama-cpp::kv-cache-seq-shift :%llama-cpp)
  (export '%llama-cpp::sample-top-k :%llama-cpp)
  (export '%llama-cpp::tokens :%llama-cpp)
  (export '%llama-cpp::sample-repetition-penalty :%llama-cpp)
  (export '%llama-cpp::all-seq-id :%llama-cpp)
  (export '%llama-cpp::model-apply-lora-from-file :%llama-cpp)
  (export '%llama-cpp::int32-t :%llama-cpp)
  (export '%llama-cpp::all-pos-1 :%llama-cpp)
  (export '%llama-cpp::n-vocab :%llama-cpp)
  (export '%llama-cpp::nb :%llama-cpp)
  (export '%llama-cpp::buffer :%llama-cpp)
  (export '%llama-cpp::%io-write-end :%llama-cpp)
  (export '%llama-cpp::token-data :%llama-cpp)
  (export '%llama-cpp::sample-temperature :%llama-cpp)
  (export '%llama-cpp::get-embeddings :%llama-cpp)
  (export '%llama-cpp::use-mlock :%llama-cpp)
  (export '%llama-cpp::%codecvt :%llama-cpp)
  (export '%llama-cpp::main-gpu :%llama-cpp)
  (export '%llama-cpp::op-params :%llama-cpp)
  (export '%llama-cpp::ftype :%llama-cpp)
  (export '%llama-cpp::mlock-supported :%llama-cpp)
  (export '%llama-cpp::grammar-copy :%llama-cpp)
  (export '%llama-cpp::+session-version+ :%llama-cpp)
  (export '%llama-cpp::%%off-t :%llama-cpp)
  (export '%llama-cpp::%old-offset :%llama-cpp)
  (export '%llama-cpp::%shortbuf :%llama-cpp)
  (export '%llama-cpp::rope-freq-base :%llama-cpp)
  (export '%llama-cpp::token-prefix :%llama-cpp)
  (export '%llama-cpp::id :%llama-cpp)
  (export '%llama-cpp::n-dims :%llama-cpp)
  (export '%llama-cpp::%io-read-end :%llama-cpp)
  (export '%llama-cpp::get-model-tensor :%llama-cpp)
  (export '%llama-cpp::token-to-piece :%llama-cpp)
  (export '%llama-cpp::n-embd :%llama-cpp)
  (export '%llama-cpp::seed :%llama-cpp)
  (export '%llama-cpp::logit :%llama-cpp)
  (export '%llama-cpp::ggml-log-level :%llama-cpp)
  (export '%llama-cpp::token-middle :%llama-cpp)
  (export '%llama-cpp::kv-cache-seq-cp :%llama-cpp)
  (export '%llama-cpp::+api+ :%llama-cpp)
  (export '%llama-cpp::n-threads :%llama-cpp)
  (export '%llama-cpp::token-bos :%llama-cpp)
  (export '%llama-cpp::n-sample :%llama-cpp)
  (export '%llama-cpp::%io-file :%llama-cpp)
  (export '%llama-cpp::+default-seed+ :%llama-cpp)
  (export '%llama-cpp::beams-state :%llama-cpp)
  (export '%llama-cpp::t-sample-ms :%llama-cpp)
  (export '%llama-cpp::gretype :%llama-cpp)
  (export '%llama-cpp::embedding :%llama-cpp)
  (export '%llama-cpp::%io-marker :%llama-cpp)
  (export '%llama-cpp::time-us :%llama-cpp)
  (export '%llama-cpp::t-end-ms :%llama-cpp)
  (export '%llama-cpp::beam-views :%llama-cpp)
  (export '%llama-cpp::name :%llama-cpp)
  (export '%llama-cpp::file :%llama-cpp)
  (export '%llama-cpp::+max-rng-state+ :%llama-cpp)
  (export '%llama-cpp::size-t :%llama-cpp)
  (export '%llama-cpp::data :%llama-cpp)
  (export '%llama-cpp::sample-frequency-and-presence-penalties
          :%llama-cpp)
  (export '%llama-cpp::allow-requantize :%llama-cpp)
  (export '%llama-cpp::grammar :%llama-cpp)
  (export '%llama-cpp::get-logits :%llama-cpp)
  (export '%llama-cpp::get-model :%llama-cpp)
  (export '%llama-cpp::rope-freq-scale-train :%llama-cpp)
  (export '%llama-cpp::%io-save-base :%llama-cpp)
  (export '%llama-cpp::src :%llama-cpp)
  (export '%llama-cpp::uint64-t :%llama-cpp)
  (export '%llama-cpp::n-p-eval :%llama-cpp)
  (export '%llama-cpp::sample-top-p :%llama-cpp)
  (export '%llama-cpp::grammar-init :%llama-cpp)
  (export '%llama-cpp::p :%llama-cpp)
  (export '%llama-cpp::save-session-file :%llama-cpp)
  (export '%llama-cpp::rope-freq-scale :%llama-cpp)
  (export '%llama-cpp::free-model :%llama-cpp)
  (export '%llama-cpp::view-offs :%llama-cpp)
  (export '%llama-cpp::%io-backup-base :%llama-cpp)
  (export '%llama-cpp::get-logits-ith :%llama-cpp)
  (export '%llama-cpp::n-eval :%llama-cpp)
  (export '%llama-cpp::kv-cache-seq-keep :%llama-cpp)
  (export '%llama-cpp::t-start-ms :%llama-cpp)
  (export '%llama-cpp::set-n-threads :%llama-cpp)
  (export '%llama-cpp::only-copy :%llama-cpp)
  (export '%llama-cpp::model-quantize :%llama-cpp)
  (export '%llama-cpp::%offset :%llama-cpp)
  (export '%llama-cpp::load-model-from-file :%llama-cpp)
  (export '%llama-cpp::kv-cache-tokens-rm :%llama-cpp)
  (export '%llama-cpp::t-load-ms :%llama-cpp)
  (export '%llama-cpp::use-mmap :%llama-cpp)
  (export '%llama-cpp::sample-grammar :%llama-cpp)
  (export '%llama-cpp::%io-write-ptr :%llama-cpp)
  (export '%llama-cpp::size :%llama-cpp)
  (export '%llama-cpp::%flags2 :%llama-cpp)
  (export '%llama-cpp::n-beams :%llama-cpp)
  (export '%llama-cpp::backend-init :%llama-cpp)
  (export '%llama-cpp::op :%llama-cpp)
  (export '%llama-cpp::sample-token-greedy :%llama-cpp)
  (export '%llama-cpp::kv-cache-seq-rm :%llama-cpp)
  (export '%llama-cpp::all-pos-0 :%llama-cpp)
  (export '%llama-cpp::model-desc :%llama-cpp)
  (export '%llama-cpp::eval-embd :%llama-cpp)
  (export '%llama-cpp::padding :%llama-cpp)
  (export '%llama-cpp::%io-buf-end :%llama-cpp)
  (export '%llama-cpp::token-type :%llama-cpp)
  (export '%llama-cpp::uint32-t :%llama-cpp)
  (export '%llama-cpp::%io-read-ptr :%llama-cpp)
  (export '%llama-cpp::%io-wide-data :%llama-cpp)
  (export '%llama-cpp::%fileno :%llama-cpp)
  (export '%llama-cpp::mmap-supported :%llama-cpp)
  (export '%llama-cpp::%wide-data :%llama-cpp)
  (export '%llama-cpp::%io-write-base :%llama-cpp)
  (export '%llama-cpp::decode :%llama-cpp)
  (export '%llama-cpp::token-get-text :%llama-cpp))

